/**
 * VerityReputation
 * This is a simple Verity reputation API. You can find out more about Verity at <a href='http://getcrystal.net'>http://getcrystal.net</a>  For this sample, you can use the api key 'special-key' for tests that need authorization (authorization filters).  Where possible we specify multi-hashes as unique identifiers that can be used by distributed cryptographically secure systems (blockchains) Where possible we specify hyper-media links (e.g. JSON-LD) to describe data that is linked in graph structures by nature (blockchain data, IPFS data, etc.)  Agents, Entity and Activity should map to provenance ontology described in https://www.w3.org/TR/prov-o Transaction is an implementation that maps to TrustAtoms. https://github.com/CoMakery/trust-exchange/blob/master/README.md This is a simple Verity reputation API. You can find out more about Verity at <a href='http://getcrystal.net'>http://getcrystal.net</a>  For this sample, you can use the api key 'special-key' for tests that need authorization (authorization filters).  Where possible we specify multi-hashes as unique identifiers that can be used by distributed cryptographically secure systems (blockchains) Where possible we specify hyper-media links (e.g. JSON-LD) to describe data that is linked in graph structures by nature (blockchain data, IPFS data, etc.)  Agents, Entity and Activity should map to provenance ontology described in https://www.w3.org/TR/prov-o Transaction is an implementation that maps to TrustAtoms. https://github.com/CoMakery/trust-exchange/blob/master/README.md
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package site.verity.client.api;

import site.verity.client.ApiCallback;
import site.verity.client.ApiClient;
import site.verity.client.ApiException;
import site.verity.client.ApiResponse;
import site.verity.client.Configuration;
import site.verity.client.Pair;
import site.verity.client.ProgressRequestBody;
import site.verity.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import site.verity.client.mode.Transaction;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionApi {
    private ApiClient apiClient;

    public TransactionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createTransaction */
    private com.squareup.okhttp.Call createTransactionCall(Transaction body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        

        // create path and map variables
        String localVarPath = "/transaction".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * create transaction
     * 
     * @param body  (optional)
     * @return Transaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Transaction createTransaction(Transaction body) throws ApiException {
        ApiResponse<Transaction> resp = createTransactionWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * create transaction
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Transaction> createTransactionWithHttpInfo(Transaction body) throws ApiException {
        com.squareup.okhttp.Call call = createTransactionCall(body, null, null);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * create transaction (asynchronously)
     * 
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTransactionAsync(Transaction body, final ApiCallback<Transaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTransactionCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getTransactionByTargetAgentId */
    private com.squareup.okhttp.Call getTransactionByTargetAgentIdCall(String targetAgentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'targetAgentId' is set
        if (targetAgentId == null) {
            throw new ApiException("Missing the required parameter 'targetAgentId' when calling getTransactionByTargetAgentId(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/transaction/{targetAgentId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "targetAgentId" + "\\}", apiClient.escapeString(targetAgentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * get Transactions by targetAgentId
     * TODO:consider paginating results in similar way to reddit API https://www.reddit.com/dev/api/
     * @param targetAgentId  (required)
     * @return List&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Transaction> getTransactionByTargetAgentId(String targetAgentId) throws ApiException {
        ApiResponse<List<Transaction>> resp = getTransactionByTargetAgentIdWithHttpInfo(targetAgentId);
        return resp.getData();
    }

    /**
     * get Transactions by targetAgentId
     * TODO:consider paginating results in similar way to reddit API https://www.reddit.com/dev/api/
     * @param targetAgentId  (required)
     * @return ApiResponse&lt;List&lt;Transaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Transaction>> getTransactionByTargetAgentIdWithHttpInfo(String targetAgentId) throws ApiException {
        com.squareup.okhttp.Call call = getTransactionByTargetAgentIdCall(targetAgentId, null, null);
        Type localVarReturnType = new TypeToken<List<Transaction>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get Transactions by targetAgentId (asynchronously)
     * TODO:consider paginating results in similar way to reddit API https://www.reddit.com/dev/api/
     * @param targetAgentId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransactionByTargetAgentIdAsync(String targetAgentId, final ApiCallback<List<Transaction>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransactionByTargetAgentIdCall(targetAgentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Transaction>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getTransactionByTargetAgentIdByValueActionId */
    private com.squareup.okhttp.Call getTransactionByTargetAgentIdByValueActionIdCall(String targetAgentId, String valueActionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'targetAgentId' is set
        if (targetAgentId == null) {
            throw new ApiException("Missing the required parameter 'targetAgentId' when calling getTransactionByTargetAgentIdByValueActionId(Async)");
        }
        
        // verify the required parameter 'valueActionId' is set
        if (valueActionId == null) {
            throw new ApiException("Missing the required parameter 'valueActionId' when calling getTransactionByTargetAgentIdByValueActionId(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/transaction/{targetAgentId}/{valueActionId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "targetAgentId" + "\\}", apiClient.escapeString(targetAgentId.toString()))
        .replaceAll("\\{" + "valueActionId" + "\\}", apiClient.escapeString(valueActionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * get transactions by targetAgent and valueAction
     * 
     * @param targetAgentId  (required)
     * @param valueActionId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getTransactionByTargetAgentIdByValueActionId(String targetAgentId, String valueActionId) throws ApiException {
        getTransactionByTargetAgentIdByValueActionIdWithHttpInfo(targetAgentId, valueActionId);
    }

    /**
     * get transactions by targetAgent and valueAction
     * 
     * @param targetAgentId  (required)
     * @param valueActionId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getTransactionByTargetAgentIdByValueActionIdWithHttpInfo(String targetAgentId, String valueActionId) throws ApiException {
        com.squareup.okhttp.Call call = getTransactionByTargetAgentIdByValueActionIdCall(targetAgentId, valueActionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * get transactions by targetAgent and valueAction (asynchronously)
     * 
     * @param targetAgentId  (required)
     * @param valueActionId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransactionByTargetAgentIdByValueActionIdAsync(String targetAgentId, String valueActionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransactionByTargetAgentIdByValueActionIdCall(targetAgentId, valueActionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getTransactionsByDates */
    private com.squareup.okhttp.Call getTransactionsByDatesCall(String targetAgentId, String fromdate, String todate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'targetAgentId' is set
        if (targetAgentId == null) {
            throw new ApiException("Missing the required parameter 'targetAgentId' when calling getTransactionsByDates(Async)");
        }
        
        // verify the required parameter 'fromdate' is set
        if (fromdate == null) {
            throw new ApiException("Missing the required parameter 'fromdate' when calling getTransactionsByDates(Async)");
        }
        
        // verify the required parameter 'todate' is set
        if (todate == null) {
            throw new ApiException("Missing the required parameter 'todate' when calling getTransactionsByDates(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/transaction/{targetAgentId}/{fromdate}/{todate}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "targetAgentId" + "\\}", apiClient.escapeString(targetAgentId.toString()))
        .replaceAll("\\{" + "fromdate" + "\\}", apiClient.escapeString(fromdate.toString()))
        .replaceAll("\\{" + "todate" + "\\}", apiClient.escapeString(todate.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * get Transactions by Dates
     * 
     * @param targetAgentId  (required)
     * @param fromdate  (required)
     * @param todate  (required)
     * @return List&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Transaction> getTransactionsByDates(String targetAgentId, String fromdate, String todate) throws ApiException {
        ApiResponse<List<Transaction>> resp = getTransactionsByDatesWithHttpInfo(targetAgentId, fromdate, todate);
        return resp.getData();
    }

    /**
     * get Transactions by Dates
     * 
     * @param targetAgentId  (required)
     * @param fromdate  (required)
     * @param todate  (required)
     * @return ApiResponse&lt;List&lt;Transaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Transaction>> getTransactionsByDatesWithHttpInfo(String targetAgentId, String fromdate, String todate) throws ApiException {
        com.squareup.okhttp.Call call = getTransactionsByDatesCall(targetAgentId, fromdate, todate, null, null);
        Type localVarReturnType = new TypeToken<List<Transaction>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get Transactions by Dates (asynchronously)
     * 
     * @param targetAgentId  (required)
     * @param fromdate  (required)
     * @param todate  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransactionsByDatesAsync(String targetAgentId, String fromdate, String todate, final ApiCallback<List<Transaction>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransactionsByDatesCall(targetAgentId, fromdate, todate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Transaction>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

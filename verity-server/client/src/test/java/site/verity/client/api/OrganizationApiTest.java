/**
 * VerityReputation
 * This is a simple Verity reputation API. You can find out more about Verity at <a href='http://getcrystal.net'>http://getcrystal.net</a>  For this sample, you can use the api key 'special-key' for tests that need authorization (authorization filters).  Where possible we specify multi-hashes as unique identifiers that can be used by distributed cryptographically secure systems (blockchains) Where possible we specify hyper-media links (e.g. JSON-LD) to describe data that is linked in graph structures by nature (blockchain data, IPFS data, etc.)  Agents, Entity and Activity should map to provenance ontology described in https://www.w3.org/TR/prov-o Transaction is an implementation that maps to TrustAtoms. https://github.com/CoMakery/trust-exchange/blob/master/README.md This is a simple Verity reputation API. You can find out more about Verity at <a href='http://getcrystal.net'>http://getcrystal.net</a>  For this sample, you can use the api key 'special-key' for tests that need authorization (authorization filters).  Where possible we specify multi-hashes as unique identifiers that can be used by distributed cryptographically secure systems (blockchains) Where possible we specify hyper-media links (e.g. JSON-LD) to describe data that is linked in graph structures by nature (blockchain data, IPFS data, etc.)  Agents, Entity and Activity should map to provenance ontology described in https://www.w3.org/TR/prov-o Transaction is an implementation that maps to TrustAtoms. https://github.com/CoMakery/trust-exchange/blob/master/README.md
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package site.verity.client.api;

import site.verity.client.ApiException;
import site.verity.client.ApiResponse;
import site.verity.client.mode.Organization;
import site.verity.client.mode.Agent;
import site.verity.client.mode.Community;
import org.junit.Test;
import org.junit.Assert;
//import static org.hamcrest.Matchers.*;
import org.junit.BeforeClass;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.util.Arrays;

/**
 * API tests for OrganizationApi
 */
public class OrganizationApiTest {

	//TODO:this should be driven from the config, not a constant
    private static final String API_BASE_PATH = "http://localhost:8080/verity/core";
	private static OrganizationApi api;
	
    @BeforeClass
    public static void runOnceBeforeClass() {
    	api  = new OrganizationApi();
        api.getApiClient().setBasePath(API_BASE_PATH);
        System.out.println("@BeforeClass - runOnceBeforeClass");
    }
	
	
    /**
     * createOrganization should throw exception if mandatory
     * field is not supplied in the request.
     */
    @Test
    public void createOrganizationWithMissingRequiredElement_returnsMessageInErrorResponse() throws ApiException {
    	boolean threwException = false;
    	Organization body = generateOrganizationAndCommunity();
        body.setUuid(null); //simulate failure to send uuid field
        try{
        	api.createOrganizationWithHttpInfo(body);
        }catch(ApiException ex){
        	String bodyText = ex.getResponseBody();
        	Assert.assertTrue(bodyText, bodyText.contains("OrganizationUUID is required"));
        	threwException = true;
        }
        assertTrue(threwException);
    }

    /**
     * create an Organization
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
	@Test
	public void createOrganizationWithEmptyIds_returnsOrganizationWithGeneratedIds() throws ApiException {
		Organization body = generateOrganizationAndCommunity();
		ApiResponse<Organization> response = null;
		response = api.createOrganizationWithHttpInfo(body);

		assertEquals(response.getStatusCode(), 200);
		assertEquals( java.util.UUID.randomUUID().toString().length(), 
								response.getData().getAgent().getUuid().length());
	}
    
    
    /**
     * get organization
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrganizationTest() throws ApiException {
		Organization body = generateOrganizationAndCommunity();
		ApiResponse<Organization> response = api.createOrganizationWithHttpInfo(body);
		assertEquals(response.getStatusCode(), 200);
		
		Organization orgFromCreateResponse = response.getData();
		Organization theOrgFromRequest = api.getOrganization(orgFromCreateResponse.getUuid());
		assertEquals(theOrgFromRequest.getAgent().getUuid(), 
				orgFromCreateResponse.getAgent().getUuid());
		assertEquals(theOrgFromRequest.getCommunity().getAgent().getUuid(), 
				orgFromCreateResponse.getCommunity().getAgent().getUuid());
    }
    
    /**
     * update Organization
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateOrganizationTest() throws ApiException {
    	//create a new org with community.
    	String NEW_NAME = "Wiki 2.0";
		Organization body = generateOrganizationAndCommunity();
		ApiResponse<Organization> response = api.createOrganizationWithHttpInfo(body);
		assertEquals(response.getStatusCode(), 200);
		Organization newOrg = response.getData();
		newOrg.setOrgName(NEW_NAME);
		api.updateOrganization(newOrg);
		Organization updatedOrg = api.getOrganization(newOrg.getUuid());
		assertEquals(NEW_NAME, updatedOrg.getOrgName());
    }
    
	private Organization generateOrganizationAndCommunity() {
		Organization body = new Organization();
		body.setUuid("");
		body.setOrgName("Wikipedia");
		
        Agent orgAgent = new Agent();
        orgAgent.setUuid("");
        orgAgent.setAttestationUrls(Arrays.asList("foo","bar"));
        orgAgent.setPublicKey("somereallylongpublickeystring129-408-120481-590810235159159058190-589");
		body.setAgent(orgAgent);
        
        Agent communityAgent = new Agent();
        communityAgent.setUuid("");
        communityAgent.setAttestationUrls(Arrays.asList("http://keybase.io/some/key","http://twitter.com/my_pk_encrypedtweet"));
        communityAgent.setPublicKey("another_publickeystring129-408-120481-590810235159159058190-589");
		
        Community community = new Community();
        community.setAgent(communityAgent);
        community.setCommunityName("Content Creators");
        community.setUuid("");
        
        body.setCommunity(community);
		return body;
	}
    

}

{
    "swagger": "2.0",
    "info": {
        "version": "1.0.2",
        "title": "VerityReputation",
        "description": "You can find out more about Verity at <a href='http://verity.site'>http://verity.site</a>  For this sample, you can use the api key 'special-key' for tests that need authorization (authorization filters).\n\nThe collaboration layer in Verity is built on the notion of agents, content and communities. Agents are any users, groups, or autonomous actors that can perform actions within the system. A community in Verity is a group of agents that share a common purpose, vision, or goal. Content is anything in the Verity protocol that can be rated or acted upon, but which cannot itself act.\n\nThe purpose of the Verity collaboration layer is to ensure that communities organize talent, resources, and actions around their shared economic and social interest. There are two specific goals: to preserve community intent over time, thus preserving the identity of the community, and to incentivize actions in alignment with that intent.\n\nWhere possible we specify multi-hashes as unique identifiers that can be used by distributed cryptographically secure systems (blockchains)\nWhere possible we specify hyper-media links (e.g. JSON-LD) to describe data that is linked in graph structures by nature (blockchain data, IPFS data, etc.)\n\nAgents, Entity and Activity should map to provenance ontology described in https://www.w3.org/TR/prov-o\n\nTransaction is an implementation that maps to TrustAtoms. https://github.com/CoMakery/trust-exchange/blob/master/README.md"
    },
    "host": "springserver.cfapps.io",
    "basePath": "/v1",
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "securityDefinitions": {
        "Authorization": {
            "name": "Authorization",
            "type": "apiKey",
            "in": "header"
        },
        "demo": {
            "type": "basic"
        }
    },
    "paths": {
        "/organization": {
            "post": {
                "operationId": "createOrganization",
                "summary": "create an Organization",
                "tags": [
                    "Organization"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Organization"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/Organization"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "description": "Status 500"
                    }
                }
            },
            "put": {
                "operationId": "updateOrganization",
                "summary": "update Organization",
                "tags": [
                    "Organization"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Organization"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            },
            "get": {
                "operationId": "getOrganizationsByQuery",
                "summary": "get organizations by query parameters",
                "tags": [
                    "Organization"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "enspath",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "description": "Returns zero or more organizations",
                            "items": {
                                "$ref": "#/definitions/Organization"
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            }
        },
        "/organization/{uuid}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getOrganization",
                "summary": "get organization",
                "tags": [
                    "Organization"
                ],
                "responses": {
                    "200": {
                        "description": "Status 200",
                        "schema": {
                            "$ref": "#/definitions/Organization"
                        }
                    }
                }
            }
        },
        "/community": {
            "post": {
                "operationId": "createCommunity",
                "summary": "create a Community",
                "tags": [
                    "Community"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Community"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/Community"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            },
            "put": {
                "operationId": "updateCommunity",
                "summary": "update a community",
                "tags": [
                    "Community"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Community"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            },
            "get": {
                "operationId": "getCommunitiesByQueryParameters",
                "summary": "get communities by query parameters",
                "tags": [
                    "Community"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "enspath",
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "parentid",
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "organizationid",
                        "in": "query",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "description": "returns zero or more communities",
                            "items": {
                                "$ref": "#/definitions/Community"
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            }
        },
        "/community/{community_uuid}/members/{person_uuid}": {
            "parameters": [
                {
                    "name": "community_uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "person_uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "operationId": "addCommunityMember",
                "summary": "add community member",
                "tags": [
                    "Community"
                ],
                "description": "It seems this should be a Community admin function. Perhaps it would be better for a Person to Join a Community, or optionally Leave a Community. Adding / removing members needs more though. It's possible that members may need to be invited or allowed to join base on some criteria (group vote, etc.)",
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            }
        },
        "/community/{uuid}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getCommunity",
                "summary": "get community",
                "tags": [
                    "Community"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/Community"
                        }
                    }
                }
            }
        },
        "/community/{uuid}/community": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getCommunitySubCommunities",
                "summary": "get community sub communities",
                "tags": [
                    "Community"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "description": "return zero or more sub communities",
                            "items": {
                                "$ref": "#/definitions/Community"
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            }
        },
        "/community/{uuid}/members": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getCommunityMembers",
                "summary": "get community members",
                "tags": [
                    "Community"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Person"
                            }
                        }
                    }
                }
            }
        },
        "/community/{uuid}/content": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getCommunityContent",
                "summary": "get community content",
                "tags": [
                    "Community"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Content"
                            }
                        }
                    }
                }
            }
        },
        "/community/{uuid}/ethic": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getCommunityEthics",
                "summary": "get community ethics",
                "tags": [
                    "Community"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/trait:paged:pageNumber"
                    },
                    {
                        "$ref": "#/parameters/trait:paged:pageSize"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Ethic"
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            }
        },
        "/community/{uuid}/proposal": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getCommunityProposals",
                "summary": "get community proposals",
                "tags": [
                    "Community"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/trait:paged:pageNumber"
                    },
                    {
                        "$ref": "#/parameters/trait:paged:pageSize"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/proposal"
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            }
        },
        "/community/{uuid}/contest": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getCommunityContests",
                "summary": "get community contests",
                "tags": [
                    "Community"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/trait:paged:pageNumber"
                    },
                    {
                        "$ref": "#/parameters/trait:paged:pageSize"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/contest"
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            }
        },
        "/person": {
            "post": {
                "operationId": "createPerson",
                "summary": "create person",
                "tags": [
                    "Person"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Person"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "muilti-hash blockchain id for the newly created person account",
                        "schema": {
                            "$ref": "#/definitions/Person"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            },
            "put": {
                "operationId": "updatePerson",
                "summary": "update person",
                "tags": [
                    "Person"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Person"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Status 200"
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            },
            "get": {
                "operationId": "getPersonByQueryParameters",
                "summary": "get Person by qeury parameters",
                "tags": [
                    "Person"
                ],
                "parameters": [
                    {
                        "name": "firstname",
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "lastname",
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "nickname",
                        "in": "query",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "description": "returns zero or more persons",
                            "items": {
                                "$ref": "#/definitions/Person"
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            }
        },
        "/person/{uuid}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "description": "multi-hash id of person record on the blockchain",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getPerson",
                "summary": "get Person",
                "tags": [
                    "Person"
                ],
                "responses": {
                    "200": {
                        "description": "Status 200",
                        "schema": {
                            "$ref": "#/definitions/Person"
                        }
                    }
                }
            }
        },
        "/person/{uuid}/reputation/{communityid}/{valuetypeid}/{reputationtype}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "communityid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "valuetypeid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "reputationtype",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "GET_person-uuid-reputation-communityid-valuetypeid-reputationtype",
                "summary": "get person reputation",
                "tags": [
                    "Person"
                ],
                "description": "Get the reputation as calculated by the algorithm requested in the reputationtype parameter.",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "number",
                            "description": "the result of the reputation calculation as a numerical value"
                        }
                    }
                }
            }
        },
        "/person/{uuid}/content": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "description": "multi-hash id of person record on the blockchain",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getPersonContent",
                "summary": "get Person Content",
                "tags": [
                    "Person"
                ],
                "description": "Get all the content this person has authored or co-authored",
                "parameters": [
                    {
                        "$ref": "#/parameters/trait:byDateRange:startDate"
                    },
                    {
                        "$ref": "#/parameters/trait:byDateRange:endDate"
                    },
                    {
                        "$ref": "#/parameters/trait:paged:pageNumber"
                    },
                    {
                        "$ref": "#/parameters/trait:paged:pageSize"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Status 200",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Content"
                            }
                        }
                    }
                }
            }
        },
        "/content": {
            "post": {
                "operationId": "createContent",
                "summary": "create Content",
                "tags": [
                    "Content"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Content"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/Content"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            },
            "put": {
                "operationId": "updateContent",
                "summary": "update Content",
                "tags": [
                    "Content"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Content"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            }
        },
        "/content/{uuid}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getContent",
                "summary": "get content",
                "tags": [
                    "Content"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/Content"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            }
        },
        "/content/{uuid}/reputation/{communityid}/{valuetypeid}/{reputationtype}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "communityid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "valuetypeid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "reputationtype",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getContentReputation",
                "summary": "get content reputation",
                "tags": [
                    "Content"
                ],
                "description": "Gets the reputation score for a piece of content or other non-actor object.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ReputationRequest",
                            "example": {
                                "reputationType": "SimpleKarma",
                                "parameters": [
                                    {
                                        "key": "startDate",
                                        "value": "endDate"
                                    }
                                ]
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "number",
                            "description": "the result of the reputation calculation as a numerical value"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            }
        },
        "/ethic": {
            "post": {
                "operationId": "createEthic",
                "summary": "create ethic",
                "tags": [
                    "Ethic"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Ethic"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/Ethic"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            },
            "get": {
                "operationId": "getEthicsByQuery",
                "summary": "get ethics by query parameters",
                "tags": [
                    "Ethic"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "$ref": "#/parameters/trait:paged:pageNumber"
                    },
                    {
                        "$ref": "#/parameters/trait:paged:pageSize"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Ethic"
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            }
        },
        "/ethic/{uuid}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getEthic",
                "summary": "get ethic",
                "tags": [
                    "Ethic"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/Ethic"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            }
        },
        "/valueaction": {
            "post": {
                "operationId": "createValueAction",
                "summary": "create ValueAction",
                "tags": [
                    "ValueAction"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ValueAction"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/ValueAction"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            },
            "put": {
                "operationId": "updateValueAction",
                "summary": "update ValueAction",
                "tags": [
                    "ValueAction"
                ],
                "description": "Updating the value of the ValueAction will cause any calculations in the future to use this new value, changing the rewards retroactivly. If you want to prohibit these types of retroactive changes, set the archived bit to true and create a new ValueAction and use it going forward.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ValueAction"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            }
        },
        "/valueaction/{uuid}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "delete": {
                "operationId": "archiveValueAction",
                "summary": "archive ValueAction",
                "tags": [
                    "ValueAction"
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            },
            "get": {
                "operationId": "getValueAction",
                "summary": "get ValueAction",
                "tags": [
                    "ValueAction"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/ValueAction"
                        }
                    }
                }
            }
        },
        "/actiontype": {
            "post": {
                "operationId": "createActiontype",
                "summary": "create ActionType",
                "tags": [
                    "ActionType"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ActionType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Status 200",
                        "schema": {
                            "$ref": "#/definitions/ActionType"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            },
            "put": {
                "operationId": "updateActiontype",
                "summary": "update ActionType",
                "tags": [
                    "ActionType"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ActionType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Status 200"
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            }
        },
        "/actiontype/{uuid}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getActiontype",
                "summary": "get ActionType",
                "tags": [
                    "ActionType"
                ],
                "responses": {
                    "200": {
                        "description": "Status 200",
                        "schema": {
                            "$ref": "#/definitions/ActionType"
                        }
                    }
                }
            }
        },
        "/transaction": {
            "post": {
                "operationId": "createTransaction",
                "summary": "create transaction",
                "tags": [
                    "Transaction"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Transaction"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "hash - Ethereum address of the transaction. For demo / proof of concept this will be a db id or offchain hash.",
                        "schema": {
                            "$ref": "#/definitions/Transaction"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            }
        },
        "/transaction/{uuid}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getTransaction",
                "summary": "get transaction",
                "tags": [
                    "Transaction"
                ],
                "description": "Get a specific transaction by id",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/Transaction"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            }
        },
        "/transaction/agent/{agentId}": {
            "parameters": [
                {
                    "name": "agentId",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getTransactionsByAgent",
                "summary": "get Transactions by AgentId",
                "tags": [
                    "Transaction"
                ],
                "description": "Get all transaction for an agent. Use query parameters to limit results. Transactions will be returned where the agent is both the source or the target unless limited by the 'direction' parameter.",
                "parameters": [
                    {
                        "name": "direction",
                        "in": "query",
                        "description": "limit by source or target, e.g. the the agent is sending or receving the transaction.",
                        "type": "string",
                        "enum": [
                            "source",
                            "target"
                        ]
                    },
                    {
                        "$ref": "#/parameters/trait:paged:pageNumber"
                    },
                    {
                        "$ref": "#/parameters/trait:paged:pageSize"
                    },
                    {
                        "$ref": "#/parameters/trait:byDateRange:startDate"
                    },
                    {
                        "$ref": "#/parameters/trait:byDateRange:endDate"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Transaction"
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            }
        },
        "/reputation/{community}/{reputationtype}/{agent}/{valueaction}": {
            "parameters": [
                {
                    "name": "community",
                    "in": "path",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "reputationtype",
                    "in": "path",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "agent",
                    "in": "path",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "valueaction",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getReputation",
                "summary": "get reputation",
                "tags": [
                    "Reputation"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "integer",
                            "description": "The reputation score calculated for the agent-valueType-reputationType"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            }
        },
        "/contest/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "GET-contest",
                "summary": "Get Contest",
                "tags": [
                    "Contest"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/contest-input"
                        }
                    }
                }
            },
            "put": {
                "operationId": "PUT-contest",
                "summary": "Update Contest",
                "tags": [
                    "Contest"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/contest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/contest-input"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "DELETE-contest",
                "summary": "Delete Contest",
                "tags": [
                    "Contest"
                ],
                "responses": {
                    "204": {
                        "description": ""
                    }
                }
            }
        },
        "/contest": {
            "get": {
                "operationId": "LIST-contests",
                "summary": "List Contests",
                "tags": [
                    "Contest"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "type": "array",
                            "description": "array of contest ids",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/contest-input"
                            }
                        }
                    }
                }
            },
            "post": {
                "operationId": "POST-contest",
                "summary": "Create Contest",
                "tags": [
                    "Contest"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/contestentry"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/contest-input"
                        }
                    }
                }
            }
        },
        "/contest/entry/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "GET-contestentry",
                "summary": "Get ContestEntry",
                "tags": [
                    "ContestEntry"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/contestentry-input"
                        }
                    }
                }
            },
            "put": {
                "operationId": "PUT-contestentry",
                "summary": "Update ContestEntry",
                "tags": [
                    "ContestEntry"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/contestentry"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/contestentry-input"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "DELETE-contestentry",
                "summary": "Delete ContestEntry",
                "tags": [
                    "ContestEntry"
                ],
                "responses": {
                    "204": {
                        "description": ""
                    }
                }
            }
        },
        "/contest/{id}/entry": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "LIST-contestentries",
                "summary": "List ContestEntries",
                "tags": [
                    "ContestEntry"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/contestentry"
                            }
                        }
                    }
                }
            }
        },
        "/contest/entry": {
            "post": {
                "operationId": "POST-contestentry",
                "summary": "Create ContestEntry",
                "tags": [
                    "ContestEntry"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/contestentry"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/contestentry-input"
                        }
                    }
                }
            }
        },
        "/contest/contestant/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "GET-contestant",
                "summary": "Get Contestant",
                "tags": [
                    "Contestant"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/contestants-input"
                        }
                    }
                }
            },
            "put": {
                "operationId": "PUT-contestant",
                "summary": "Update Contestant",
                "tags": [
                    "Contestant"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/contestant"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/contestants-input"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "DELETE-contestant",
                "summary": "Delete Contestant",
                "tags": [
                    "Contestant"
                ],
                "responses": {
                    "204": {
                        "description": ""
                    }
                }
            }
        },
        "/contest/{id}/contestant": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "LIST-contestants",
                "summary": "List Contestants",
                "tags": [
                    "Contestant"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/contestant"
                            }
                        }
                    }
                }
            }
        },
        "/contest/contestant": {
            "post": {
                "operationId": "POST-contestant",
                "summary": "Create Contestant",
                "tags": [
                    "Contestant"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/contestants-input"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/contestants-input"
                        }
                    }
                }
            }
        },
        "/proposal/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "GET-proposal",
                "summary": "Get Proposal",
                "tags": [
                    "Proposal"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/proposal-input"
                        }
                    }
                }
            },
            "put": {
                "operationId": "PUT-proposal",
                "summary": "Update Proposal",
                "tags": [
                    "Proposal"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/proposal-input"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/proposal-input"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "DELETE-proposal",
                "summary": "Delete Proposal",
                "tags": [
                    "Proposal"
                ],
                "responses": {
                    "204": {
                        "description": ""
                    }
                }
            }
        },
        "/proposal": {
            "get": {
                "operationId": "LIST-proposals",
                "summary": "List Proposals",
                "tags": [
                    "Proposal"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/proposal-input"
                            }
                        }
                    }
                }
            },
            "post": {
                "operationId": "POST-proposal",
                "summary": "Create Proposal",
                "tags": [
                    "Proposal"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/proposal-input"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/proposal-input"
                        }
                    }
                }
            }
        }
    },
    "parameters": {
        "trait:checkGas:checkGas": {
            "name": "checkGas",
            "in": "header",
            "type": "string"
        },
        "trait:byDateRange:startDate": {
            "name": "startDate",
            "in": "query",
            "required": true,
            "type": "string"
        },
        "trait:byDateRange:endDate": {
            "name": "endDate",
            "in": "query",
            "required": true,
            "type": "string"
        },
        "trait:paged:pageNumber": {
            "name": "pageNumber",
            "in": "query",
            "description": "starting page number. Must be > 0.",
            "required": true,
            "type": "integer",
            "minimum": 1
        },
        "trait:paged:pageSize": {
            "name": "pageSize",
            "in": "query",
            "description": "number of records to return per page.",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "maximum": 1000
        }
    },
    "responses": {
        "trait:standardErrors:401": {
            "description": "",
            "schema": {
                "type": "object"
            }
        },
        "trait:standardErrors:403": {
            "description": "",
            "schema": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string"
                    }
                },
                "required": [
                    "message"
                ]
            }
        },
        "trait:standardErrors:404": {
            "description": "",
            "schema": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string"
                    },
                    "error": {
                        "type": "string"
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }
        },
        "trait:standardErrors:409": {
            "description": "",
            "schema": {
                "type": "object",
                "description": "409 Conflict. https://tools.ietf.org/html/rfc7231#section-6.5.8"
            }
        },
        "trait:standardErrors:422": {
            "description": "",
            "schema": {
                "type": "object",
                "description": "422 Unprocessable Entity. http://tools.ietf.org/html/rfc4918#section-11.2"
            }
        },
        "trait:standardErrors:500": {
            "description": "",
            "schema": {
                "type": "object"
            }
        }
    },
    "definitions": {
        "Organization": {
            "title": "Organization",
            "type": "object",
            "description": "Organization is at the top level of the ecosystem. An organization has one community that is the root of the community ecosystem (tree). A community can have sub communities so the hirearchy is Organization->Community->Sub Communities",
            "properties": {
                "uuid": {
                    "type": "string",
                    "description": "UUID, GUID, HASH,  MultiHash or ProxyContract Address that represents this object"
                },
                "orgName": {
                    "type": "string"
                },
                "identity": {
                    "$ref": "#/definitions/Identity"
                },
                "community": {
                    "$ref": "#/definitions/Community"
                },
                "governanceController": {
                    "type": "string",
                    "description": "Address of the master controller for community governance contracts. Should incorporate the rules for adding, removing and changing community governance contracts."
                }
            },
            "required": [
                "uuid",
                "orgName",
                "identity",
                "community"
            ]
        },
        "ActionType": {
            "title": "ActionType",
            "type": "object",
            "description": "Type of action that results in a transaction. Seen from the POV of the giver - use a verb to describe act of giving or rating, e.g. upvote, give points, tagged, rate.",
            "properties": {
                "uuid": {
                    "type": "string",
                    "description": "UUID, GUID, HASH,  MultiHash or ProxyContract Address that represents this object"
                },
                "actionName": {
                    "type": "string",
                    "description": "Represents action taken that triggers a claim to be recorded as a transaction. Use verb to describe act of giving or rating, e.g. upvote, give points, tagged, rate."
                },
                "description": {
                    "type": "string",
                    "description": "Describes this action in detail. Formatted as JSON or JSON:LD. Should include the ActionName along with a longer description or link to more content."
                },
                "communityId": {
                    "type": "string",
                    "description": "Community that registered this ActionType. Multi-hash or JSON-LD format."
                }
            },
            "required": [
                "uuid",
                "actionName",
                "communityId"
            ]
        },
        "Person": {
            "title": "Person",
            "type": "object",
            "properties": {
                "identity": {
                    "$ref": "#/definitions/Identity"
                },
                "uuid": {
                    "type": "string",
                    "description": "UUID, GUID, HASH,  MultiHash or ProxyContract Address that represents this object"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "nickName": {
                    "type": "string"
                },
                "organizationId": {
                    "type": "string"
                },
                "description": {
                    "$ref": "#/definitions/Content"
                }
            },
            "required": [
                "identity",
                "uuid",
                "nickName"
            ]
        },
        "Transaction": {
            "title": "Transaction",
            "type": "object",
            "description": "An attestation or claim, with potential numeric value attached, made by one identity about another identity as the result of an event. Represents a singular event that transfers or bestows reputation to the target/recipient. The sender/source can be a person, software agent, organization or the like. Intended to be independent of database or blockchain so all IDs should be globally identifiable hashes in multi-hash format pointing to the canonical representation or permanent public store.\n\nSimilar to and should map to TrustAtom https://github.com/CoMakery/trust-exchange/blob/master/README.md or Ethereum Claim https://github.com/ethereum/EIPs/issues/780",
            "properties": {
                "uuid": {
                    "type": "string",
                    "description": "registry key, UUID, GUID, HASH,  MultiHash or Transaction Hash that represents this object"
                },
                "claim": {
                    "type": "string",
                    "description": "If this transaction record is an attestation or claim, the claim data goes here. e.g. json web token (JWT) with structured data."
                },
                "valueActionId": {
                    "type": "string",
                    "description": "Hash link to description of how the score will be derived, or the community feature that affects the way the value will be interpreted. Could be a globally unique link or content addressable graph pointing to a richer source of description or information."
                },
                "sourceAgentId": {
                    "type": "string",
                    "description": "Claim Issuer"
                },
                "targetAgentId": {
                    "type": "string",
                    "description": "Target or Subject Identity. Can be anything with a unique id, including IOT devices, people, things, content, and even another Transaction. The last case would be usefull for validating an attestation (Transaction) by third parties, establishing a web of trust."
                },
                "timeStamp": {
                    "type": "string",
                    "description": "timestamp or block height of blockchain at time of creation. Should be self-describing as to format and meaning."
                },
                "value": {
                    "format": "string",
                    "description": "value (points) awarded at the time of the transaction. Immutable. Use ValueActionId to lookup the 'current' value if you want to calculate points based on the latest default value as apposed to the value awarded at time of the transaction. This allows for 'retroactive' adjustment of points.",
                    "type": "integer"
                }
            },
            "required": [
                "uuid",
                "valueActionId",
                "sourceAgentId",
                "targetAgentId",
                "timeStamp"
            ]
        },
        "Identity": {
            "title": "Identity",
            "type": "object",
            "description": "An identity is something that bears some form of responsibility for changing state in the Verity system. Identities have agency and could be a smart contract, person, organization, device, or anything that controlls the private key of the account used to make claims and attestation.\n\nShoul be easily transformed to or from w3c DIDs  https://w3c-ccg.github.io/did-spec/",
            "properties": {
                "uuid": {
                    "type": "string",
                    "description": "UUID, GUID, HASH,  MultiHash or ProxyContract Address that represents this object"
                },
                "publicKey": {
                    "type": "string"
                },
                "attestationUrls": {
                    "description": "zero or more attestation URLs (twitter, FB, blog) links to proof of account ownership, a post with public key id of owner. Signing the attribute with the\nVerity signing key creates a claim that the Verity system has created this attestation. \n\nExamples at: \nhttps://keybase.io/\nhttps://keybase.io/docs/kbfs/understanding_kbfs\n\nHow to use Oracalize to create attestations: http://docs.oraclize.it/#datasources-url.\nAlignment with W3C Verifiable Claims spec is encouraged. https://opencreds.github.io/vc-data-model/",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "uuid",
                "publicKey"
            ]
        },
        "Content": {
            "title": "Content",
            "type": "object",
            "description": "Self describing content (document object model, JSON-LD) A physical, digital, conceptual, or other kind of thing with some fixed aspects; entities may be real or imaginary.\n\nMaps to https://www.w3.org/TR/prov-o/  prov:Entity",
            "properties": {
                "uuid": {
                    "type": "string",
                    "description": "UUID, GUID, HASH or MultiHash that represents this object. For example a GitHub commit hash or IPFS address."
                },
                "name": {
                    "type": "string",
                    "description": "name or tag"
                },
                "body": {
                    "type": "string",
                    "description": "content as text, JSON or HTML. Body is required, but if external content is being represented, the multi-hash or permalink sould be put here. "
                },
                "nodes": {
                    "type": "array",
                    "description": "child node ids",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "authors": {
                    "type": "array",
                    "description": "one or more uuids of the creating agent(s)",
                    "items": {
                        "type": "string"
                    }
                },
                "communityId": {
                    "type": "string",
                    "description": "The community from which the content originated."
                },
                "mimeType": {
                    "type": "string",
                    "description": "MIME Type. Assumed to be text/plain if not specified.",
                    "default": "text/plain"
                }
            },
            "required": [
                "uuid",
                "name",
                "body"
            ]
        },
        "Community": {
            "title": "Community",
            "type": "object",
            "properties": {
                "uuid": {
                    "type": "string",
                    "description": "UUID, GUID, HASH,  MultiHash or ProxyContract Address that represents this object"
                },
                "communityName": {
                    "type": "string"
                },
                "subCommunities": {
                    "type": "array",
                    "uniqueItems": true,
                    "description": "child community ids",
                    "items": {
                        "type": "string"
                    }
                },
                "identity": {
                    "$ref": "#/definitions/Identity"
                },
                "ethics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "valueActions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "members": {
                    "type": "array",
                    "description": "Community member list",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "communityName",
                "identity"
            ]
        },
        "SoftwareAgent": {
            "title": "SoftwareAgent",
            "type": "object",
            "description": "Bot, smart contract, or software that has agency in the reputation ecosystem (can give and receive reputation) and like other agents has a public key that can sign attestations. One such use would be for a crawler that pulls in attestations (ratings) from sites such as IMDB and as an agent of a well known organization, signs the attestations and moves them into the Verity system, vouching for their authenticity.",
            "properties": {
                "uuid": {
                    "type": "string",
                    "description": "UUID, GUID, HASH,  MultiHash or ProxyContract Address that represents this object"
                },
                "apiUrl": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "ownedByIdentity": {
                    "$ref": "#/definitions/Identity"
                }
            },
            "required": [
                "uuid",
                "apiUrl",
                "name"
            ]
        },
        "ValueAction": {
            "title": "ValueAction",
            "type": "object",
            "description": "Award with associated award amount (points) . Amount can be changed to allow for 're-distribution' of points after the transaction has been recorded.",
            "properties": {
                "uuid": {
                    "type": "string",
                    "description": "UUID, GUID, HASH,  MultiHash or ProxyContract Address that represents this object"
                },
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "Describes this action or community value. Formatted as JSON or JSON:LD. Should include a short 'tag' and optionally a longer description or link to more content."
                },
                "amount": {
                    "type": "integer",
                    "description": "Default amount to be awarded. When creating a transaction the default amount can be used or overridden. If the defalut changes at a later date, new awards can be retroactivly computed based on the new default amount, however the original transaction will remain fixed in value."
                },
                "actionTypeId": {
                    "type": "string",
                    "description": "the  UUID of the actionType"
                },
                "ethicId": {
                    "type": "string",
                    "description": "Community ethic. This will effectivly become the 'claim' in the transaction."
                },
                "communityId": {
                    "type": "string"
                },
                "awardMin": {
                    "type": "integer"
                },
                "awardMax": {
                    "type": "integer"
                },
                "awardScale": {
                    "type": "string",
                    "enum": [
                        "int",
                        "decimal",
                        "bool"
                    ],
                    "default": "int",
                    "description": ""
                },
                "archived": {
                    "type": "boolean",
                    "default": false,
                    "description": "indicates this ValueAction is frozen and read-only. No further changes to 'amount' or any other fields can be made."
                }
            },
            "required": [
                "uuid",
                "name",
                "description",
                "actionTypeId",
                "ethicId",
                "archived"
            ],
            "example": {
                "uuid": "",
                "name": "5 star rating",
                "description": "Rate from 1-5 stars",
                "amount": 3,
                "actionTypeId": "c8ed-4ad7-9846-96b648c8",
                "ethicId": "7d6e3823-14c8ed-4ad7",
                "communityId": "1496b648c8c9d714",
                "awardMin": 1,
                "awardMax": 5,
                "awardScale": "int",
                "archived": false
            }
        },
        "KeyValuePair": {
            "title": "KeyValuePair",
            "type": "object",
            "description": "key value pair as strings",
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "ReputationRequest": {
            "title": "ReputationRequest",
            "type": "object",
            "properties": {
                "reputationType": {
                    "type": "string",
                    "description": "The name or type of reputation calculation, e.g. EigenTrust or MovingAverage"
                },
                "parameters": {
                    "type": "array",
                    "description": "key-values as strings that are input paramters to the reputation engine, e.g. for moving average window.",
                    "items": {
                        "$ref": "#/definitions/KeyValuePair"
                    }
                }
            },
            "required": [
                "reputationType"
            ]
        },
        "governance": {
            "title": "Governance",
            "type": "object",
            "properties": {
                "communityId": {
                    "type": "string"
                },
                "scheme": {
                    "type": "string",
                    "description": "The type of govenance scheme, e.g. delegate voting, PLCR voting, arbitration, DemocracyOS or anything you want to call it."
                },
                "contractRegistry": {
                    "type": "array",
                    "description": "An array of Ethereum (for now) smart contract addresses that manage the govenance structure. These can be mulit-sig wallets or more sophisticated contracts.",
                    "items": {
                        "$ref": "#/definitions/KeyValuePair"
                    }
                },
                "constitution": {
                    "$ref": "#/definitions/Content"
                }
            },
            "required": [
                "communityId",
                "scheme",
                "contractRegistry"
            ]
        },
        "Ethic": {
            "title": "Ethic",
            "type": "object",
            "description": "An Ethic is a community value that the community should aspire to. An Ethic combined with ActionType (upvote, rank, rate, etc.) results in a ValueAction. A ValueAction will determine the min, max and scale for awards when a community member creates a reputation transaction.",
            "properties": {
                "uuid": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Name or Tag for this Ethic (Community Value)"
                },
                "definition": {
                    "type": "string",
                    "description": "Longform description for this Ethic (Community Value)"
                },
                "communityId": {
                    "type": "string"
                }
            },
            "required": [
                "uuid",
                "name",
                "definition",
                "communityId"
            ]
        },
        "proposal": {
            "title": "Proposal",
            "type": "object",
            "properties": {
                "uuid": {
                    "type": "string"
                },
                "communityId": {
                    "type": "string"
                },
                "content": {
                    "$ref": "#/definitions/Content"
                }
            }
        },
        "contest": {
            "title": "Contest",
            "type": "object",
            "properties": {
                "uuid": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Contest name"
                },
                "description": {
                    "type": "string"
                },
                "stakingModel": {
                    "type": "string"
                },
                "redeemModel": {
                    "type": "string"
                },
                "poolValue": {
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "poolAge": {
                    "type": "string"
                },
                "directive": {
                    "$ref": "#/definitions/ValueAction"
                },
                "contestEntries": {
                    "type": "array",
                    "description": "registered entries in a token curated registry",
                    "items": {
                        "$ref": "#/definitions/contestentry"
                    }
                }
            },
            "required": [
                "uuid"
            ]
        },
        "contestant": {
            "title": "Contestant",
            "type": "object",
            "properties": {
                "agentId": {
                    "type": "string"
                },
                "contestId": {
                    "type": "string"
                },
                "stakeTokenUnit": {
                    "type": "string"
                },
                "stakeAmount": {
                    "type": "number"
                },
                "stakeTime": {
                    "type": "string"
                }
            },
            "required": [
                "agentId",
                "contestId",
                "stakeTokenUnit",
                "stakeAmount"
            ]
        },
        "contestentry": {
            "title": "ContestEntry",
            "type": "object",
            "properties": {
                "uuid": {
                    "type": "string"
                },
                "entryName": {
                    "type": "string"
                },
                "contestId": {
                    "type": "string"
                },
                "content": {
                    "$ref": "#/definitions/Content"
                }
            },
            "required": [
                "uuid",
                "entryName",
                "contestId"
            ]
        },
        "contestants-input": {
            "title": "Contestants Input",
            "$ref": "#/definitions/contestant"
        },
        "proposal-input": {
            "title": "Proposal Input",
            "$ref": "#/definitions/proposal"
        }
    }
}
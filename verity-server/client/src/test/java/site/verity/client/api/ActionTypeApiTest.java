/**
 * VerityReputation
 * This is a simple Verity reputation API. You can find out more about Verity at <a href='http://getcrystal.net'>http://getcrystal.net</a>  For this sample, you can use the actionTypeApi key 'special-key' for tests that need authorization (authorization filters).  Where possible we specify multi-hashes as unique identifiers that can be used by distributed cryptographically secure systems (blockchains) Where possible we specify hyper-media links (e.g. JSON-LD) to describe data that is linked in graph structures by nature (blockchain data, IPFS data, etc.)  Agents, Entity and Activity should map to provenance ontology described in https://www.w3.org/TR/prov-o Transaction is an implementation that maps to TrustAtoms. https://github.com/CoMakery/trust-exchange/blob/master/README.md This is a simple Verity reputation API. You can find out more about Verity at <a href='http://getcrystal.net'>http://getcrystal.net</a>  For this sample, you can use the actionTypeApi key 'special-key' for tests that need authorization (authorization filters).  Where possible we specify multi-hashes as unique identifiers that can be used by distributed cryptographically secure systems (blockchains) Where possible we specify hyper-media links (e.g. JSON-LD) to describe data that is linked in graph structures by nature (blockchain data, IPFS data, etc.)  Agents, Entity and Activity should map to provenance ontology described in https://www.w3.org/TR/prov-o Transaction is an implementation that maps to TrustAtoms. https://github.com/CoMakery/trust-exchange/blob/master/README.md
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-actionTypeApi/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package site.verity.client.api;

import site.verity.client.ApiException;

import static org.junit.Assert.assertTrue;

import java.util.Arrays;
import java.util.logging.Logger;

import org.junit.BeforeClass;
import org.junit.Test;

import io.swagger.client.model.ActionType;
import io.swagger.client.model.Agent;
import io.swagger.client.model.Community;

/**
 * API tests for ActionTypeApi
 */
public class ActionTypeApiTest {
	private static final String API_BASE_PATH = "http://localhost:8080/verity/core"; // "http://springserver.cfapps.io/verity/core";
																						// //

	private static ActionTypeApi actionTypeApi;
	private static CommunityApi communityApi;

	private Logger log = Logger.getAnonymousLogger();

	@BeforeClass
	public static void runOnceBeforeClass() throws ApiException {

		actionTypeApi = new ActionTypeApi();
		actionTypeApi.getApiClient().setBasePath(API_BASE_PATH);
		communityApi = new CommunityApi();
		System.out.println("@BeforeClass - runOnceBeforeClass");
		System.out.println("Server path: " + API_BASE_PATH);
	}

	/**
	 * create ActionType
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void createActiontypeTest() throws ApiException {
		Agent orgAgent = new Agent();
		orgAgent.setUuid("");
		orgAgent.setAttestationUrls(Arrays.asList("foo", "bar"));
		orgAgent.setPublicKey("somereallylongpublickeystring129-408-120481-590810235159159058190-589");

		Community communityBody = new Community();
		communityBody.setCommunityName("Foo");
		communityBody.setUuid("");
		communityBody.setAgent(orgAgent);
		Community theNewCommunity = communityApi.createCommunity(communityBody);

		ActionType actionType = new ActionType();

		// set request body up
		actionType.setUuid("");
		actionType.setActionName("upvote");
		actionType.setCommunityId(theNewCommunity.getUuid());

		// ActionType response = actionTypeApi.createActiontype(body);
		ActionType responseBody = null;
		try {
			responseBody = actionTypeApi.createActiontype(actionType);
		} catch (ApiException e) {
			System.out.println(e.getResponseBody().toString());
		}

		// TODO: test validations
		assertTrue("upvote".equals(responseBody.getActionName()));
	}

	/**
	 * get ActionType
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void getActiontypeTest() throws ApiException {
		String uuid = null;
		// ActionType response = actionTypeApi.getActiontype(uuid);

		// TODO: test validations
	}

	/**
	 * update ActionType
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void updateActiontypeTest() throws ApiException {
		ActionType body = null;
		// actionTypeApi.updateActiontype(body);

		// TODO: test validations
	}

}

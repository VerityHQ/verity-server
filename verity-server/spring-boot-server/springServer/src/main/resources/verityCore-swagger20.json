{
    "swagger": "2.0",
    "info": {
        "version": "1.0.2",
        "title": "VerityReputation",
        "description": "You can find out more about Verity at <a href='http://verity.site'>http://verity.site</a>  For this sample, you can use the api key 'special-key' for tests that need authorization (authorization filters).\n\nThe collaboration layer in Verity is built on the notion of agents, content and communities. Agents are any users, groups, or autonomous actors that can perform actions within the system. A community in Verity is a group of agents that share a common purpose, vision, or goal. Content is anything in the Verity protocol that can be rated or acted upon, but which cannot itself act.\n\nThe purpose of the Verity collaboration layer is to ensure that communities organize talent, resources, and actions around their shared economic and social interest. There are two specific goals: to preserve community intent over time, thus preserving the identity of the community, and to incentivize actions in alignment with that intent.\n\nWhere possible we specify multi-hashes as unique identifiers that can be used by distributed cryptographically secure systems (blockchains)\nWhere possible we specify hyper-media links (e.g. JSON-LD) to describe data that is linked in graph structures by nature (blockchain data, IPFS data, etc.)\n\nAgents, Entity and Activity should map to provenance ontology described in https://www.w3.org/TR/prov-o\n\nTransaction is an implementation that maps to TrustAtoms. https://github.com/CoMakery/trust-exchange/blob/master/README.md This is a simple Verity reputation API. You can find out more about Verity at <a href='http://getcrystal.net'>http://getcrystal.net</a>  For this sample, you can use the api key 'special-key' for tests that need authorization (authorization filters).\n\nWhere possible we specify multi-hashes as unique identifiers that can be used by distributed cryptographically secure systems (blockchains)\nWhere possible we specify hyper-media links (e.g. JSON-LD) to describe data that is linked in graph structures by nature (blockchain data, IPFS data, etc.)\n\nAgents, Entity and Activity should map to provenance ontology described in https://www.w3.org/TR/prov-o\nTransaction is an implementation that maps to TrustAtoms. https://github.com/CoMakery/trust-exchange/blob/master/README.md"
    },
    "host": "springserver.cfapps.io",
    "basePath": "/verity/core",
    "schemes": [
        "http",
        "https"
    ],
    "produces": [
        "application/json"
    ],
    "securityDefinitions": {
        "Basic Auth": {
            "type": "basic",
            "description": "Basic Authentication for now while we build and test the api"
        },
        "verity_auth_token": {
            "name": "verity_auth_token",
            "type": "apiKey",
            "in": "query"
        }
    },
    "paths": {
        "/organization": {
            "post": {
                "operationId": "createOrganization",
                "summary": "create an Organization",
                "tags": [
                    "Organization"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Organization"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/Organization"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "description": "Status 500"
                    }
                }
            },
            "put": {
                "operationId": "updateOrganization",
                "summary": "update Organization",
                "tags": [
                    "Organization"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Organization"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            },
            "get": {
                "operationId": "getOrganizationsByQuery",
                "summary": "get organizations by query parameters",
                "tags": [
                    "Organization"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "enspath",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "description": "Returns zero or more organizations",
                            "items": {
                                "$ref": "#/definitions/Organization"
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            }
        },
        "/organization/{uuid}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getOrganization",
                "summary": "get organization",
                "tags": [
                    "Organization"
                ],
                "responses": {
                    "200": {
                        "description": "Status 200",
                        "schema": {
                            "$ref": "#/definitions/Organization"
                        }
                    }
                }
            }
        },
        "/community": {
            "post": {
                "operationId": "createCommunity",
                "summary": "create a Community",
                "tags": [
                    "Community"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Community"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/Community"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            },
            "put": {
                "operationId": "updateCommunity",
                "summary": "update a community",
                "tags": [
                    "Community"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Community"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            },
            "get": {
                "operationId": "getCommunitiesByQueryParameters",
                "summary": "get communities by query parameters",
                "tags": [
                    "Community"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "enspath",
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "parentid",
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "organizationid",
                        "in": "query",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "description": "returns zero or more communities",
                            "items": {
                                "$ref": "#/definitions/Community"
                            }
                        }
                    }
                }
            }
        },
        "/community/{communityuuid}/members/{personuuid}": {
            "parameters": [
                {
                    "name": "communityuuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "personuuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "operationId": "addCommunityMember",
                "summary": "add community member",
                "tags": [
                    "Community"
                ],
                "description": "It seems this should be a Community admin function. Perhaps it would be better for a Person to Join a Community, or optionally Leave a Community. Adding / removing members needs more though. It's possible that members may need to be invited or allowed to join base on some criteria (group vote, etc.)",
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            }
        },
        "/community/{uuid}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getCommunity",
                "summary": "get community",
                "tags": [
                    "Community"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/Community"
                        }
                    }
                }
            }
        },
        "/community/{uuid}/community": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getCommunitySubCommunities",
                "summary": "get community sub communities",
                "tags": [
                    "Community"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "description": "return zero or more sub communities",
                            "items": {
                                "$ref": "#/definitions/Community"
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            }
        },
        "/community/{uuid}/members": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getCommunityMembers",
                "summary": "get community members",
                "tags": [
                    "Community"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Person"
                            }
                        }
                    }
                }
            }
        },
        "/community/{uuid}/content": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getCommunityContent",
                "summary": "get community content",
                "tags": [
                    "Community"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Content"
                            }
                        }
                    }
                }
            }
        },
        "/person": {
            "post": {
                "operationId": "createPerson",
                "summary": "create person",
                "tags": [
                    "Person"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Person"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "muilti-hash blockchain id for the newly created person account",
                        "schema": {
                            "$ref": "#/definitions/Person"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            },
            "put": {
                "operationId": "updatePerson",
                "summary": "update person",
                "tags": [
                    "Person"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Person"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Status 200"
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            },
            "get": {
                "operationId": "GET_person",
                "summary": "get Person by qeury parameters",
                "tags": [
                    "Person"
                ],
                "parameters": [
                    {
                        "name": "firstname",
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "lastname",
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "nickname",
                        "in": "query",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "description": "returns zero or more persons",
                            "items": {
                                "$ref": "#/definitions/Person"
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            }
        },
        "/person/{uuid}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "description": "multi-hash id of person record on the blockchain",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getPerson",
                "summary": "get Person",
                "tags": [
                    "Person"
                ],
                "responses": {
                    "200": {
                        "description": "Status 200",
                        "schema": {
                            "$ref": "#/definitions/Person"
                        }
                    }
                }
            }
        },
        "/person/{uuid}/content": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "description": "multi-hash id of person record on the blockchain",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getPersonContent",
                "summary": "get Person Content",
                "tags": [
                    "Person"
                ],
                "description": "Get all the content this person has authored or co-authored",
                "parameters": [
                    {
                        "$ref": "#/parameters/trait:byDateRange:startDate"
                    },
                    {
                        "$ref": "#/parameters/trait:byDateRange:endDate"
                    },
                    {
                        "$ref": "#/parameters/trait:paged:pageNumber"
                    },
                    {
                        "$ref": "#/parameters/trait:paged:pageSize"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Status 200",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Content"
                            }
                        }
                    }
                }
            }
        },
        "/person/{uuid}/reputation/{communityid}/{valuetypeid}/{reputationtype}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "communityid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "valuetypeid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "reputationtype",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "GET_person-uuid-reputation-communityid-valuetypeid-reputationtype",
                "summary": "get person reputation",
                "tags": [
                    "Person"
                ],
                "description": "Get the reputation as calculated by the algorithm requested in the reputationtype parameter.",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "number",
                            "description": "the result of the reputation calculation as a numerical value"
                        }
                    }
                }
            }
        },
        "/content": {
            "post": {
                "operationId": "createContent",
                "summary": "create Content",
                "tags": [
                    "Content"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Content"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/Content"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            },
            "put": {
                "operationId": "updateContent",
                "summary": "update Content",
                "tags": [
                    "Content"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Content"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            }
        },
        "/content/{uuid}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getContent",
                "summary": "get content",
                "tags": [
                    "Content"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/Content"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            }
        },
        "/content/{uuid}/reputation/{communityid}/{valuetypeid}/{reputationtype}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "communityid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "valuetypeid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "reputationtype",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getContentReputation",
                "summary": "get content reputation",
                "tags": [
                    "Content"
                ],
                "description": "Gets the reputation score for a piece of content or other non-actor object.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ReputationRequest",
                            "example": {
                                "reputationType": "SimpleKarma",
                                "parameters": [
                                    {
                                        "key": "startDate",
                                        "value": "endDate"
                                    }
                                ]
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "number",
                            "description": "the result of the reputation calculation as a numerical value"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            }
        },
        "/valueaction": {
            "post": {
                "operationId": "createValueAction",
                "summary": "create ValueAction",
                "tags": [
                    "ValueAction"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ValueAction"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/ValueAction"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            },
            "put": {
                "operationId": "updateValueAction",
                "summary": "update ValueAction",
                "tags": [
                    "ValueAction"
                ],
                "description": "Updating the value of the ValueAction will cause any calculations in the future to use this new value, changing the rewards retroactivly. If you want to prohibit these types of retroactive changes, set the archived bit to true and create a new ValueAction and use it going forward.",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ValueAction"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            }
        },
        "/valueaction/{uuid}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "delete": {
                "operationId": "archiveValueAction",
                "summary": "archive ValueAction",
                "tags": [
                    "ValueAction"
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            },
            "get": {
                "operationId": "getValueAction",
                "summary": "get ValueAction",
                "tags": [
                    "ValueAction"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/ValueAction"
                        }
                    }
                }
            }
        },
        "/actiontype": {
            "post": {
                "operationId": "createActiontype",
                "summary": "create ActionType",
                "tags": [
                    "ActionType"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ActionType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Status 200",
                        "schema": {
                            "$ref": "#/definitions/ActionType"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            },
            "put": {
                "operationId": "updateActiontype",
                "summary": "update ActionType",
                "tags": [
                    "ActionType"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ActionType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Status 200"
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            }
        },
        "/actiontype/{uuid}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getActiontype",
                "summary": "get ActionType",
                "tags": [
                    "ActionType"
                ],
                "responses": {
                    "200": {
                        "description": "Status 200",
                        "schema": {
                            "$ref": "#/definitions/ActionType"
                        }
                    }
                }
            }
        },
        "/transaction": {
            "post": {
                "operationId": "createTransaction",
                "summary": "create transaction",
                "tags": [
                    "Transaction"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Transaction"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "hash - Ethereum address of the transaction. For demo / proof of concept this will be a db id or offchain hash.",
                        "schema": {
                            "$ref": "#/definitions/Transaction"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            }
        },
        "/transaction/{uuid}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getTransaction",
                "summary": "get transaction",
                "tags": [
                    "Transaction"
                ],
                "description": "Get a specific transaction by id",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/Transaction"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            }
        },
        "/transaction/agent/{agentId}": {
            "parameters": [
                {
                    "name": "agentId",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getTransactionsByAgent",
                "summary": "get Transactions by AgentId",
                "tags": [
                    "Transaction"
                ],
                "description": "Get all transaction for an agent. Use query parameters to limit results. Transactions will be returned where the agent is both the source or the target unless limited by the 'direction' parameter.",
                "parameters": [
                    {
                        "name": "direction",
                        "in": "query",
                        "description": "limit by source or target, e.g. the the agent is sending or receving the transaction.",
                        "type": "string",
                        "enum": [
                            "source",
                            "target"
                        ]
                    },
                    {
                        "$ref": "#/parameters/trait:paged:pageNumber"
                    },
                    {
                        "$ref": "#/parameters/trait:paged:pageSize"
                    },
                    {
                        "$ref": "#/parameters/trait:byDateRange:startDate"
                    },
                    {
                        "$ref": "#/parameters/trait:byDateRange:endDate"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Transaction"
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            }
        },
        "/reputation/{community}/{reputationtype}/{agent}/{valueaction}": {
            "parameters": [
                {
                    "name": "community",
                    "in": "path",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "reputationtype",
                    "in": "path",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "agent",
                    "in": "path",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "valueaction",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getReputation",
                "summary": "get reputation",
                "tags": [
                    "Reputation"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "integer",
                            "description": "The reputation score calculated for the agent-valueType-reputationType"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/trait:standardErrors:401"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standardErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standardErrors:404"
                    },
                    "409": {
                        "$ref": "#/responses/trait:standardErrors:409"
                    },
                    "422": {
                        "$ref": "#/responses/trait:standardErrors:422"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standardErrors:500"
                    }
                }
            }
        }
    },
    "parameters": {
        "trait:checkGas:checkGas": {
            "name": "checkGas",
            "in": "header",
            "type": "string"
        },
        "trait:byDateRange:startDate": {
            "name": "startDate",
            "in": "query",
            "required": true,
            "type": "string"
        },
        "trait:byDateRange:endDate": {
            "name": "endDate",
            "in": "query",
            "required": true,
            "type": "string"
        },
        "trait:paged:pageNumber": {
            "name": "pageNumber",
            "in": "query",
            "description": "starting page number. Must be > 0.",
            "required": true,
            "type": "integer",
            "minimum": 1
        },
        "trait:paged:pageSize": {
            "name": "pageSize",
            "in": "query",
            "description": "number of records to return per page.",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "maximum": 1000
        }
    },
    "responses": {
        "trait:standardErrors:401": {
            "description": "",
            "schema": {
                "type": "object"
            }
        },
        "trait:standardErrors:403": {
            "description": "",
            "schema": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string"
                    }
                },
                "required": [
                    "message"
                ]
            }
        },
        "trait:standardErrors:404": {
            "description": "",
            "schema": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string"
                    },
                    "error": {
                        "type": "string"
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }
        },
        "trait:standardErrors:409": {
            "description": "",
            "schema": {
                "type": "object",
                "description": "409 Conflict. https://tools.ietf.org/html/rfc7231#section-6.5.8"
            }
        },
        "trait:standardErrors:422": {
            "description": "",
            "schema": {
                "type": "object",
                "description": "422 Unprocessable Entity. http://tools.ietf.org/html/rfc4918#section-11.2"
            }
        },
        "trait:standardErrors:500": {
            "description": "",
            "schema": {
                "type": "object"
            }
        }
    },
    "definitions": {
        "Organization": {
            "title": "Organization",
            "type": "object",
            "description": "Organization is at the top level of the ecosystem. An organization has one community that is the root of the community ecosystem (tree). A community can have sub communities so the hirearchy is Organization->Community->Sub Communities",
            "properties": {
                "uuid": {
                    "type": "string",
                    "description": "UUID, GUID, HASH,  MultiHash or ProxyContract Address that represents this object"
                },
                "orgName": {
                    "type": "string"
                },
                "agent": {
                    "$ref": "#/definitions/Agent"
                },
                "community": {
                    "$ref": "#/definitions/Community"
                },
                "governanceController": {
                    "type": "string",
                    "description": "Address of the master controller for community governance contracts. Should incorporate the rules for adding, removing and changing community governance contracts."
                }
            },
            "required": [
                "uuid",
                "orgName",
                "agent",
                "community"
            ]
        },
        "ActionType": {
            "title": "ActionType",
            "type": "object",
            "description": "Type of action that results in a transaction. Seen from the POV of the giver - use a verb to describe act of giving or rating, e.g. upvote, give points, tagged, rate.",
            "properties": {
                "uuid": {
                    "type": "string",
                    "description": "UUID, GUID, HASH,  MultiHash or ProxyContract Address that represents this object"
                },
                "actionName": {
                    "type": "string",
                    "description": "Represents action taken that triggers a transaction of reputation. Use verb to describe act of giving or rating, e.g. upvote, give points, tagged, rate."
                },
                "description": {
                    "type": "string",
                    "description": "Describes this value in detail. Formatted as JSON or JSON:LD. Should include the ValueName along with a longer description or link to more content."
                },
                "communityId": {
                    "type": "string",
                    "description": "Community that defined this ActionType. Multi-hash or JSON-LD"
                },
                "defaultPoints": {
                    "type": "integer",
                    "format": "int32",
                    "description": "points to award in default case"
                }
            },
            "required": [
                "uuid",
                "actionName",
                "communityId"
            ]
        },
        "Person": {
            "title": "Person",
            "type": "object",
            "properties": {
                "agent": {
                    "$ref": "#/definitions/Agent"
                },
                "uuid": {
                    "type": "string",
                    "description": "UUID, GUID, HASH,  MultiHash or ProxyContract Address that represents this object"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "nickName": {
                    "type": "string"
                },
                "organizationId": {
                    "type": "string"
                },
                "description": {
                    "$ref": "#/definitions/Content"
                }
            },
            "required": [
                "agent",
                "uuid",
                "nickName"
            ]
        },
        "Transaction": {
            "title": "Transaction",
            "type": "object",
            "description": "A fundamental unit of reputation value transfer, attestation or claim. Represents a singular event that transfers or bestows reputation to the target/recipient. The sender/source can be a person, software agent, organization or the like. Intended to be independent of database or blockchain so all IDs should be globally identifiable hashes in multi-hash format pointing to the canonical representation or permanent public store.\n\nSimilar to and should map to TrustAtom https://github.com/CoMakery/trust-exchange/blob/master/README.md",
            "properties": {
                "uuid": {
                    "type": "string",
                    "description": "UUID, GUID, HASH,  MultiHash or ProxyContract Address that represents this object"
                },
                "valueActionId": {
                    "type": "string",
                    "description": "Hash link to description of how the score will be derived, or the community feature that affects the way the value will be interpreted. Could be a globally unique link or content addressable graph pointing to a richer source of description or information."
                },
                "sourceAgentId": {
                    "type": "string"
                },
                "targetAgentId": {
                    "type": "string"
                },
                "timeStamp": {
                    "type": "string",
                    "description": "timestamp or block height of blockchain at time of creation. Should be self-describing as to format and meaning."
                },
                "value": {
                    "format": "string",
                    "description": "value (points) awarded at the time of the transaction. Immutable. Use ValueActionId to lookup the 'current' value if you want to calculate points based on the latest default value as apposed to the value awarded at time of the transaction. This allows for 'retroactive' adjustment of points.",
                    "type": "integer"
                }
            },
            "required": [
                "uuid",
                "valueActionId",
                "sourceAgentId",
                "targetAgentId",
                "timeStamp"
            ]
        },
        "Agent": {
            "title": "Agent",
            "type": "object",
            "description": "Agent is something that bears some form of responsibility for changing state in the Verity system. An Agent could be a smart contract, person, organization, device, or anything the owns the Private Key half of the publicKey of the Agent and controlls the accounts used for attestationURLs.\n\nMaps to  https://www.w3.org/TR/prov-o/#Agent  prov:Agent",
            "properties": {
                "uuid": {
                    "type": "string",
                    "description": "UUID, GUID, HASH,  MultiHash or ProxyContract Address that represents this object"
                },
                "publicKey": {
                    "type": "string"
                },
                "attestationUrls": {
                    "description": "zero or more attestation URLs (twitter, FB, blog) links to proof of account ownership, a post with public key id of owner. Signing the attribute with the\nVerity signing key creates a claim that the Verity system has created this attestation. \n\nExamples at: \nhttps://keybase.io/\nhttps://keybase.io/docs/kbfs/understanding_kbfs\n\nHow to use Oracalize to create attestations: http://docs.oraclize.it/#datasources-url.\nAlignment with W3C Verifiable Claims spec is encouraged. https://opencreds.github.io/vc-data-model/",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "uuid",
                "publicKey"
            ]
        },
        "Content": {
            "title": "Content",
            "type": "object",
            "description": "Self describing content (document object model, JSON-LD) A physical, digital, conceptual, or other kind of thing with some fixed aspects; entities may be real or imaginary.\n\nMaps to https://www.w3.org/TR/prov-o/  prov:Entity",
            "properties": {
                "uuid": {
                    "type": "string",
                    "description": "UUID, GUID, HASH or MultiHash that represents this object. For example a GitHub commit hash or IPFS address."
                },
                "name": {
                    "type": "string",
                    "description": "name or tag"
                },
                "body": {
                    "type": "string",
                    "description": "content as text or JSON"
                },
                "nodes": {
                    "type": "array",
                    "description": "child node ids",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "authors": {
                    "type": "array",
                    "description": "one or more uuids of the creating agent(s)",
                    "items": {
                        "type": "string"
                    }
                },
                "communityId": {
                    "type": "string",
                    "description": "The community from which the content originated."
                }
            },
            "required": [
                "uuid",
                "name",
                "body"
            ]
        },
        "Community": {
            "title": "Community",
            "type": "object",
            "properties": {
                "uuid": {
                    "type": "string",
                    "description": "UUID, GUID, HASH,  MultiHash or ProxyContract Address that represents this object"
                },
                "communityName": {
                    "type": "string"
                },
                "subCommunities": {
                    "type": "array",
                    "uniqueItems": true,
                    "description": "child community ids",
                    "items": {
                        "type": "string"
                    }
                },
                "agent": {
                    "$ref": "#/definitions/Agent"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ActionType"
                    }
                }
            },
            "required": [
                "communityName",
                "agent"
            ]
        },
        "SoftwareAgent": {
            "title": "SoftwareAgent",
            "type": "object",
            "description": "Bot, smart contract, or software that has agency in the reputation ecosystem (can give and receive reputation) and like other agents has a public key that can sign attestations. One such use would be for a crawler that pulls in attestations (ratings) from sites such as IMDB and as an agent of a well known organization, signs the attestations and moves them into the Verity system, vouching for their authenticity.",
            "properties": {
                "uuid": {
                    "type": "string",
                    "description": "UUID, GUID, HASH,  MultiHash or ProxyContract Address that represents this object"
                },
                "apiUrl": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "ownedBy": {
                    "$ref": "#/definitions/Agent"
                }
            },
            "required": [
                "uuid",
                "apiUrl",
                "name"
            ]
        },
        "ValueAction": {
            "title": "ValueAction",
            "type": "object",
            "description": "Award with associated award amount (points) . Amount can be changed to allow for 're-distribution' of points after the transaction has been recorded.",
            "properties": {
                "uuid": {
                    "type": "string",
                    "description": "UUID, GUID, HASH,  MultiHash or ProxyContract Address that represents this object"
                },
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "Describes this action or community value. Formatted as JSON or JSON:LD. Should include a short 'tag' and optionally a longer description or link to more content."
                },
                "amount": {
                    "type": "integer",
                    "description": "The amount to be awarded. When creating a transaction the default amount can be used or overridden. If the defalut changes at a later date, new awards can be retroactivly computed based on the new default amount, however the original transaction will remain fixed in value."
                },
                "actionTypeId": {
                    "type": "string",
                    "description": "the  UUID of the actionType"
                },
                "archived": {
                    "type": "boolean",
                    "default": false,
                    "description": "indicates this ValueAction is frozen and read-only. No further changes to 'amount' or any other fields can be made."
                },
                "communityId": {
                    "type": "string"
                }
            },
            "required": [
                "uuid",
                "description",
                "actionTypeId",
                "archived",
                "name"
            ]
        },
        "KeyValuePair": {
            "title": "KeyValuePair",
            "type": "object",
            "description": "key value pair as strings",
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "ReputationRequest": {
            "title": "ReputationRequest",
            "type": "object",
            "properties": {
                "reputationType": {
                    "type": "string",
                    "description": "The name or type of reputation calculation, e.g. EigenTrust or MovingAverage"
                },
                "parameters": {
                    "type": "array",
                    "description": "key-values as strings that are input paramters to the reputation engine, e.g. for moving average window.",
                    "items": {
                        "$ref": "#/definitions/KeyValuePair"
                    }
                }
            },
            "required": [
                "reputationType"
            ]
        },
        "governance": {
            "title": "Governance",
            "type": "object",
            "properties": {
                "communityId": {
                    "type": "string"
                },
                "scheme": {
                    "type": "string",
                    "description": "The type of govenance scheme, e.g. delegate voting, arbitration, DemocracyOS or anything you want to call it."
                },
                "contractRegistry": {
                    "type": "array",
                    "description": "An arry of Ethereum (for now) addresses that mange the govenance structure. These can be mulit-sig wallets or more sophisticated contracts.",
                    "items": {}
                },
                "constitution": {
                    "$ref": "#/definitions/Content"
                }
            },
            "required": [
                "communityId",
                "scheme",
                "contractRegistry"
            ]
        }
    }
}
/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.InlineResponse403;
import io.swagger.model.InlineResponse404;
import io.swagger.model.Organization;
import io.swagger.model.Person;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-07-27T15:39:32.532-07:00")

@Api(value = "organization", description = "the organization API")
public interface OrganizationApi {

    @ApiOperation(value = "create an Organization", notes = "", response = Organization.class, tags={ "Organization", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "", response = Organization.class),
        @ApiResponse(code = 401, message = "", response = Object.class),
        @ApiResponse(code = 403, message = "", response = InlineResponse403.class),
        @ApiResponse(code = 404, message = "", response = InlineResponse404.class),
        @ApiResponse(code = 409, message = "", response = Object.class),
        @ApiResponse(code = 422, message = "", response = Object.class),
        @ApiResponse(code = 500, message = "Status 500", response = Void.class) })
    
    @RequestMapping(value = "/organization",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Organization> createOrganization(@ApiParam(value = ""  )  @Valid @RequestBody Organization body);


    @ApiOperation(value = "get organization", notes = "", response = Organization.class, tags={ "Organization", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Status 200", response = Organization.class) })
    
    @RequestMapping(value = "/organization/{uuid}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Organization> getOrganization(@ApiParam(value = "",required=true ) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "get organizations by query parameters", notes = "", response = Organization.class, responseContainer = "List", tags={ "Organization", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Organization.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "", response = Object.class),
        @ApiResponse(code = 403, message = "", response = InlineResponse403.class),
        @ApiResponse(code = 404, message = "", response = InlineResponse404.class),
        @ApiResponse(code = 409, message = "", response = Object.class),
        @ApiResponse(code = 422, message = "", response = Object.class),
        @ApiResponse(code = 500, message = "", response = Object.class) })
    
    @RequestMapping(value = "/organization",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Organization>> getOrganizationsByQuery( @NotNull@ApiParam(value = "", required = true) @RequestParam(value = "name", required = true) String name,@ApiParam(value = "") @RequestParam(value = "enspath", required = false) String enspath);


    @ApiOperation(value = "update Organization", notes = "", response = Void.class, tags={ "Organization", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Void.class),
        @ApiResponse(code = 401, message = "", response = Object.class),
        @ApiResponse(code = 403, message = "", response = InlineResponse403.class),
        @ApiResponse(code = 404, message = "", response = InlineResponse404.class),
        @ApiResponse(code = 409, message = "", response = Object.class),
        @ApiResponse(code = 422, message = "", response = Object.class),
        @ApiResponse(code = 500, message = "", response = Object.class) })
    
    @RequestMapping(value = "/organization",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateOrganization(@ApiParam(value = ""  )  @Valid @RequestBody Organization body);

    
    @ApiOperation(value = "get organization members", notes = "", response = Person.class, responseContainer = "List", tags={ "Organization", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Person.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "", response = Object.class),
        @ApiResponse(code = 403, message = "", response = InlineResponse403.class),
        @ApiResponse(code = 404, message = "", response = InlineResponse404.class),
        @ApiResponse(code = 409, message = "", response = Object.class),
        @ApiResponse(code = 422, message = "", response = Object.class),
        @ApiResponse(code = 500, message = "", response = Object.class) })
    @RequestMapping(value = "/organization/{uuid}/members",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Person>> getOrganizationMembers(@ApiParam(value = "",required=true ) 
    	@PathVariable("uuid") String uuid, @NotNull @Min(1)
    	@ApiParam(value = "starting page number. Must be > 0.", required = true) 
    	@RequestParam(value = "pageNumber", required = true) Integer pageNumber, @NotNull @Min(1) @Max(1000) 
    	@ApiParam(value = "number of records to return per page.", required = true) 
    	@RequestParam(value = "pageSize", required = true) Integer pageSize);

    
    
    
}
